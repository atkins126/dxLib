(*
Copyright (c) 2016 Darian Miller
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished to do so, provided that the above copyright notice(s) and this permission notice
appear in all copies of the Software and that both the above copyright notice(s) and this permission notice appear in supporting documentation.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS NOTICE BE
LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Except as contained in this notice, the name of a copyright holder shall not be used in advertising or otherwise to promote the sale, use or other
dealings in this Software without prior written authorization of the copyright holder.

As of January 2016, latest version available online at:
  https://github.com/darianmiller/dxLib
*)
unit dxLib_ClassPropertyArray;

interface
{$I dxLib.inc}

uses
  {$IFDEF DX_UnitScopeNames}
  System.Classes,
  System.TypInfo;
  {$ELSE}
  Classes,
  TypInfo;
  {$ENDIF}

type

  //Wrapper around PPropList, array of PPropInfo (class property details) generated by GetPropList RTTI method for a given instance
  TdxClassPropertyArray = class
  private
    fPPropArray:PPropList;
    fCount:Integer;

    function GetItem(const aIndex:Integer):PPropInfo;
  public
    constructor Create(const aInstance:TPersistent;
                       const aFilter:TTypeKinds=tkProperties
                       {$IFDEF DX_Supports_Sorted_GetPropList}
                       ;const aSortList:Boolean=false
                       {$ENDIF}
                       );
    destructor Destroy(); override;

    property Count:Integer read fCount;
    property Items[const aIndex:Integer]:PPropInfo read GetItem;

    function GetPropertyByName(const aPropertyName:String):PPropInfo;
  end;


implementation
uses
  {$IFDEF DX_UnitScopeNames}
  System.SysUtils;
  {$ELSE}
  SysUtils;
  {$ENDIF}


constructor TdxClassPropertyArray.Create(const aInstance:TPersistent;
                                         const aFilter:TTypeKinds=tkProperties
                                         {$IFDEF DX_Supports_Sorted_GetPropList}
                                         ;const aSortList:Boolean=false
                                         {$ENDIF}
                                         );
var
  vListSize:Integer;
begin
  inherited Create();

  if Assigned(aInstance) then
  begin
    {$IFDEF DX_Supports_Sorted_GetPropList}
    fCount := GetPropList(aInstance.ClassInfo, aFilter, nil, False); //False=don't waste sorting list first time around.
    {$ELSE}
    fCount := GetPropList(aInstance.ClassInfo, aFilter, nil);
    {$ENDIF}
    vListSize := fCount * SizeOf(PPropInfo);
    GetMem(fPPropArray, vListSize);
    {$IFDEF DX_Supports_Sorted_GetPropList}
    GetPropList(aInstance.ClassInfo, aFilter, fPPropArray, aSortList);
    {$ELSE}
    GetPropList(aInstance.ClassInfo, aFilter, fPPropArray);
    {$ENDIF}
  end;
end;


destructor TdxClassPropertyArray.Destroy();
begin
  if Assigned(fPPropArray) then
  begin
    FreeMem(fPPropArray);
    fPPropArray := nil;
  end;

  inherited;
end;


function TdxClassPropertyArray.GetItem(const aIndex:Integer):PPropInfo;
begin
  Result := fPPropArray^[aIndex];
end;


function TdxClassPropertyArray.GetPropertyByName(const aPropertyName:String):PPropInfo;
var
  i:Integer;
  vProperty:PPropInfo;
  vPropertyName:String;
begin
  Result := nil;

  for i := 0 to Count-1 do
  begin
    vProperty := Items[i];
    vPropertyName := String(vProperty.Name);
    if SameText(vPropertyName, aPropertyName) then
    begin
      Result := vProperty;
      break;
    end;
  end;
end;


end.
